version: 2.1 
orbs:
  node: circleci/node@3.0.0
commands:          
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force                 
          
            aws cloudformation delete-stack --stack-name udapeople-bk-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-fe-<<parameters.workflow_id>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run 
          when: on_fail
          command: |
              cd ~/project/backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.<done>
              npm run migrations:revert
                   
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            exit 0
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end audit
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: back-end audit
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-bk-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  configure-infrastructure:
      docker:
        # Select proper image
        - image: amazon/aws-cli
      steps:
        - checkout
        # Add the necessary SSH key fingerprint
        - add_ssh_keys:
            fingerprints: ["f2:b5:a8:a4:e0:ab:7b:46:31:2f:1c:a5:bf:32:a2:26"]    
        - run:
            name: Install dependencies
            command: |
              yum update -y
              yum install -y tar gzip unzip
              yum -y install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
              yum -y install ansible
        - attach_workspace:
            at: ~/        
        #We get the IP from the inv file and run ansible
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml   
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID}
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migrations_file.txt
            cat migrations_file.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully." migrations_file.txt
            then
              echo "it worked"
            else
              echo "It failed"
              cd ~/project/backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.<done>
              npm run migrations:revert              
            fi
      # Here's where you will add some code to rollback on failure                
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}   
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip sudo
            # Install Nodejs
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> .circleci/Backend_Link.txt
            cat .circleci/Backend_Link.txt
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(cat .circleci/Backend_Link.txt)
            echo "${API_URL}" > frontend/.env
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}  

  deploy-backend:
    docker:
      - image: amazon/aws-cli:latest
      - image: circleci/node:13.8.0      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f2:b5:a8:a4:e0:ab:7b:46:31:2f:1c:a5:bf:32:a2:26"]
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
              yum install -y curl tar gzip sudo
              # Install Nodejs
              curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
              yum install -y nodejs          
              yum update -y
              yum install -y tar gzip unzip
              yum -y install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
              yum -y install ansible
              npm install pm2 -g
      - attach_workspace:
          at: ~/        
      - run:
          name: Create backend .env
          command: |
            echo -e "NODE_ENV=local\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env          
      - run:           
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}  
          
  smoke-test:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip sudo
            # Install Nodejs
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs          
            yum update -y
            yum install -y tar gzip unzip
            yum -y install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum -y install ansible
      - run:
          name: Get backend url
          command: |          
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" )          
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${BACKEND_IP}"
            echo "${API_URL}"
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "frond end passed"
              exit 0
              
            else
              exit 1
            fi
      - run:
          name: Backend smoke test
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --output text >> .circleci/Backend_IP.txt  
            cat .circleci/Backend_IP.txt
            export API_IP=$(cat .circleci/Backend_IP.txt)    
            export API_URL="http://${API_IP}:3030"
            echo "${API_URL}"
            echo "${API_IP}"     
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
  cloudfront-update:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip sudo
      - run:
          name: Find Old workflow ID and update stack
          command: |            
                cd .circleci/files
                aws cloudformation deploy \
                            --template-file cloudfront.yml \
                            --stack-name InitialStack\
                            --parameter-overrides WorkflowID=udapeople-kk1j287dhjppmz43799          
                export  OldWorkflowID=$(aws cloudformation \
                        list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text| tr -d '\n')
                echo $OldWorkflowID > ~/OldWorkflowID.txt
                cat ~/OldWorkflowID.txt  
                aws cloudformation deploy \
                  --template-file cloudfront.yml \
                  --stack-name InitialStack \
                  --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID}" \
                  --tags project=udapeople       
                echo  OldWorkflowID :  ${OldWorkflowID}
                echo current workflow id is : ${CIRCLE_WORKFLOW_ID}        
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}                                      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]                 
      - configure-infrastructure:
          requires: [deploy-infrastructure]   
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [run-migrations]  
      - deploy-backend:
          requires: [run-migrations] 
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]  
      - cloudfront-update:
          requires: [smoke-test]
                                             